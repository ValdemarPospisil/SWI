Promt:

Dej mi Code review pro tento pull request


diff --git a/src/Main.hs b/src/Main.hs

index 310e9ee..081deba 100644

--- a/src/Main.hs

+++ b/src/Main.hs

@@ -1,10 +1,31 @@

import System.Random (randomRIO)

-import Control.Monad (replicateM)

-import Data.List (intercalate)

+import Control.Monad (replicateM, when)

+import Data.List (intercalate, sort)

+import System.IO (hFlush, stdout)

+import Data.Time.Clock (getCurrentTime)

+import Data.Time.Format (formatTime, defaultTimeLocale)

+import System.Directory (createDirectoryIfMissing)

+import qualified Data.Map as Map

-- Datové typy pro nálady a témata

-data Mood = Happy | Sad | Reflective deriving (Show, Enum, Bounded)

-data Theme = Rain | Forest | Night | City deriving (Show, Enum, Bounded)

+data Mood = Happy | Sad | Reflective | Anxious | Nostalgic

+ deriving (Show, Enum, Bounded, Eq, Ord)

+

+data Theme = Rain | Forest | Night | City | Ocean | Mountain | Desert

+ deriving (Show, Enum, Bounded, Eq, Ord)

+

+-- Datová struktura pro ukládání historie

+data HaikuHistory = HaikuHistory {

+ poemText :: String,

+ poemMood :: Mood,

+ poemTheme :: Theme,

+ timestamp :: String

+} deriving (Show)

+

+-- Globální historie básní

+type HaikuHistoryMap = Map.Map Int HaikuHistory

+haikuHistory :: HaikuHistoryMap

+haikuHistory = Map.empty

-- Pomocná funkce pro výběr náhodného prvku

randomFrom :: [a] -> IO a

@@ -12,15 +33,59 @@ randomFrom xs = do

idx <- randomRIO (0, length xs - 1)

return (xs !! idx)

--- Výběr z předem definovaných možností

-promptChoice :: (Show a, Enum a, Bounded a) => String -> IO a

+-- Vylepšená funkce pro výběr z možností s potvrzením

+promptChoice :: (Show a, Enum a, Bounded a, Ord a) => String -> IO a

promptChoice label = do

putStrLn $ "\n" ++ label

- let options = [minBound .. maxBound]

+ let options = sort [minBound .. maxBound]

mapM_ (\(i, opt) -> putStrLn $ show i ++ ". " ++ show opt) (zip [1..] options)

- putStr "Zadej číslo: "

+ putStr "Zadej číslo (nebo 0 pro náhodný výběr): "

+ hFlush stdout -- Zajistí, že se prompt okamžitě zobrazí

idx <- readLn

- return (options !! (idx - 1))

+ if idx == 0

+ then randomFrom options

+ else if idx >= 1 && idx <= length options

+ then return (options !! (idx - 1))

+ else do

+ putStrLn "Neplatná volba, zkus to znovu."

+ promptChoice label

+

+-- Funkce pro ověření, zda haiku splňuje požadovaný počet slabik (5-7-5)

+validateHaiku :: String -> Bool

+validateHaiku poem =

+ let lines = words <$> lines poem

+ counts = map length lines

+ in length counts == 3 && counts == [5, 7, 5]

+

+-- Funkce pro uložení vygenerovaného haiku do historie

+saveHaiku :: String -> Mood -> Theme -> IO Int

+saveHaiku poem mood theme = do

+ currentTime <- getCurrentTime

+ let timeStr = formatTime defaultTimeLocale "%Y-%m-%d %H:%M:%S" currentTime

+ newHistory = HaikuHistory poem mood theme timeStr

+ newId = Map.size haikuHistory + 1

+ return newId

+

+-- Funkce pro export haiku do souboru

+exportHaiku :: String -> Mood -> Theme -> IO ()

+exportHaiku poem mood theme = do

+ currentTime <- getCurrentTime

+ let timeStr = formatTime defaultTimeLocale "%Y%m%d%H%M%S" currentTime

+ fileName = "haiku_" ++ show mood ++ "_" ++ show theme ++ "_" ++ timeStr ++ ".txt"

+ folderPath = "output"

+

+ -- Vytvoření složky, pokud neexistuje

+ createDirectoryIfMissing True folderPath

+

+ -- Uložení básně do souboru

+ writeFile (folderPath ++ "/" ++ fileName) $

+ "Haiku\n" ++

+ "Mood: " ++ show mood ++ "\n" ++

+ "Theme: " ++ show theme ++ "\n" ++

+ "Date: " ++ formatTime defaultTimeLocale "%Y-%m-%d %H:%M:%S" currentTime ++ "\n\n" ++

+ poem

+

+ putStrLn $ "Haiku uloženo do souboru: " ++ fileName

-- Slovníky podle nálady a tématu

getWordLists :: Mood -> Theme -> ([String], [String], [String])

@@ -39,6 +104,18 @@ getWordLists Reflective Rain =

, ["Thoughts like rivers slowly pass", "Puddles mirror what I am"]

, ["Grey clouds drift within", "Past lives drip away"]

)

+-- Přidaná nová kombinace pro Anxious City

+getWordLists Anxious City =

+ ( ["Traffic roars like waves", "Ticking clocks too loud"]

+ , ["Crowds swarm through concrete canyons", "Eyes avoid meeting strangers' gaze"]

+ , ["Heart beats much too fast", "No peace in this place"]

+ )

+-- Přidaná nová kombinace pro Nostalgic Ocean

+getWordLists Nostalgic Ocean =

+ ( ["Childhood shores return", "Salt spray on my lips"]

+ , ["Memories float on gentle tides", "Seashells whisper stories old"]

+ , ["Time washed out to sea", "Waves bring past to shore"]

+ )

getWordLists _ _ =

( ["Leaves fall quietly", "Silent moonlight shines"]

, ["Dreams awaken under trees", "Lanterns glow in distant mist"]

@@ -54,13 +131,79 @@ generateHaiku mood theme = do

l3 <- randomFrom l3s

return $ intercalate "\n" [l1, l2, l3]

--- Hlavní funkce

+-- Generování sekvence haiku

+generateHaikuSequence :: Int -> Mood -> Theme -> IO [String]

+generateHaikuSequence count mood theme

+ | count <= 0 = return []

+ | otherwise = do

+ sequence <- replicateM count (generateHaiku mood theme)

+ return sequence

+

+-- Zobrazení menu

+showMenu :: IO ()

+showMenu = do

+ putStrLn "\nVyber akci:"

+ putStrLn "1. Vygenerovat jedno haiku"

+ putStrLn "2. Vygenerovat sekvenci haiku"

+ putStrLn "3. Exportovat haiku do souboru"

+ putStrLn "4. Konec"

+ putStr "Tvá volba: "

+ hFlush stdout

+

+-- Hlavní funkce programu

main :: IO ()

main = do

- putStrLn "Vítej v generátoru Haiku!"

- mood <- promptChoice "Vyber náladu:"

- theme <- promptChoice "Vyber téma:"

- putStrLn "\nVygenerované Haiku:"

- putStrLn "--------------------"

- poem <- generateHaiku mood theme

- putStrLn poem

+ putStrLn "Vítej v generátoru Haiku 2.0!"

+ mainLoop

+

+mainLoop :: IO ()

+mainLoop = do

+ showMenu

+ choice <- readLn

+ case choice of

+ 1 -> do

+ mood <- promptChoice "Vyber náladu:"

+ theme <- promptChoice "Vyber téma:"

+ putStrLn "\nVygenerované Haiku:"

+ putStrLn "--------------------"

+ poem <- generateHaiku mood theme

+ putStrLn poem

+

+ when (not $ validateHaiku poem) $

+ putStrLn "Upozornění: Toto haiku nemusí dodržovat tradiční formát 5-7-5 slabik."

+

+ -- Uložení do historie

+ _ <- saveHaiku poem mood theme

+ mainLoop

+

+ 2 -> do

+ mood <- promptChoice "Vyber náladu:"

+ theme <- promptChoice "Vyber téma:"

+ putStr "Kolik haiku chceš vygenerovat? "

+ hFlush stdout

+ count <- readLn

+ putStrLn "\nVygenerovaná sekvence Haiku:"

+ putStrLn "-------------------------"

+ sequence <- generateHaikuSequence count mood theme

+ mapM_ (\(i, p) -> do

+ putStrLn $ "Haiku #" ++ show i ++ ":"

+ putStrLn p

+ putStrLn ""

+ ) $ zip [1..] sequence

+ mainLoop

+

+ 3 -> do

+ mood <- promptChoice "Vyber náladu:"

+ theme <- promptChoice "Vyber téma:"

+ putStrLn "\nVygenerované Haiku k exportu:"

+ putStrLn "----------------------------"

+ poem <- generateHaiku mood theme

+ putStrLn poem

+ exportHaiku poem mood theme

+ mainLoop

+

+ 4 -> putStrLn "Děkuji za použití generátoru Haiku. Nashledanou!"

+

+ _ -> do

+ putStrLn "Neplatná volba, zkus to znovu."

+ mainLoop 







Code Review: Haskell Haiku Generator v2
Celkově se jedná o pěkné rozšíření původního generátoru Haiku. Přidání menu, historie (i když zatím ne plně funkční), exportu do souboru a dalších nálad/témat výrazně zvyšuje užitečnost a zajímavost programu. Kód je většinou čitelný a využívá idiomatické Haskell konstrukce.
Zde jsou konkrétní body k revizi:
Pozitivní body:
Rozšířené možnosti: Přidání více nálad (Mood) a témat (Theme) spolu s odpovídajícími slovními zásobami (Anxious City, Nostalgic Ocean) je skvělé rozšíření.
Uživatelské rozhraní: Implementace menu (showMenu, mainLoop) a vylepšené zadávání voleb (promptChoice s možností náhodného výběru a validací) zlepšuje interakci s uživatelem. Použití hFlush stdout je správné pro zajištění okamžitého zobrazení výzvy.
Export do souboru: Funkce exportHaiku pro uložení básně do souboru s unikátním názvem (včetně timestampu) a automatické vytvoření adresáře output je praktická.
Generování sekvencí: Možnost generovat více haiku najednou (generateHaikuSequence) je užitečný přídavek.
Struktura kódu: Rozdělení logiky do menších funkcí (generateHaiku, promptChoice, exportHaiku, validateHaiku atd.) podporuje modularitu.
Oblasti pro zlepšení a návrhy:
Implementace historie (HaikuHistory):
Problém: Aktuální kód definuje datový typ HaikuHistory a mapu haikuHistory, ale tato mapa není nikdy aktualizována. Funkce saveHaiku vypočítá newId, ale neuloží newHistory do globální mapy. Globální proměnná haikuHistory je vždy prázdná (Map.empty).
Návrh: Pro správu stavu (historie) v Haskellu v rámci IO akcí je potřeba použít mechanismus pro měnitelný stav. Běžné přístupy jsou:
IORef: Vytvoř IORef HaikuHistoryMap v main a předávej ho do funkcí, které ho potřebují modifikovat (např. saveHaiku by pak použilo atomicModifyIORef' nebo modifyIORef').
Předávání stavu: Uprav mainLoop a další relevantní funkce tak, aby přijímaly HaikuHistoryMap jako argument a vracely jeho novou verzi. Např.: mainLoop :: HaikuHistoryMap -> IO ().
State Monad Transformer (StateT): Pro komplexnější správu stavu by bylo možné použít StateT HaikuHistoryMap IO a.
Funkce saveHaiku by měla skutečně ukládat data do historie a její návratová hodnota (ID) by se mohla potenciálně využít (např. pro zobrazení historie). Nyní je návratová hodnota zahozena (_ <- saveHaiku ...).
Validace Haiku (validateHaiku):
Problém: Funkce validateHaiku kontroluje počet slov na řádek (length lines), nikoli počet slabik. Haiku tradičně vyžaduje strukturu 5-7-5 slabik. Tato implementace je tedy nesprávná a může být matoucí.
Návrh: Implementace přesného počítání slabik v angličtině (nebo jakémkoli jazyce) je netriviální. Bylo by potřeba použít buď externí knihovnu, nebo vytvořit poměrně složitou heuristiku založenou na pravidlech výslovnosti. Pokud není cílem přesná validace slabik, bylo by možná lepší tuto funkci odstranit nebo jasněji okomentovat, že kontroluje pouze počet slov jako hrubý odhad struktury. Pokud validaci ponecháš, měla by se aplikovat i při generování sekvencí a exportu, nejen při generování jednoho haiku.
Zpracování chyb při vstupu:
Problém: readLn může selhat (a způsobit pád programu), pokud uživatel zadá nečíselný vstup.
Návrh: Použij bezpečnější funkci jako readMaybe z modulu Text.Read. Pokud readMaybe vrátí Nothing, můžeš uživateli zobrazit chybovou hlášku a požádat ho o opětovné zadání.
import Text.Read (readMaybe)

-- Příklad v mainLoop
mainLoop :: IO () -- Nebo s IORef/stavem
mainLoop = do
  showMenu
  input <- getLine
  case readMaybe input :: Maybe Int of
    Just choice -> processChoice choice -- Zpracuj volbu
    Nothing -> do
      putStrLn "Neplatný vstup, zadej prosím číslo."
      mainLoop


Globální stav (haikuHistory):
Jak bylo zmíněno v bodě 1, definování měnitelného stavu jako globální konstanty na nejvyšší úrovni není v Haskellu ideální. Preferuje se explicitní předávání stavu nebo použití IORef/MVar.
Duplikace kódu:
Volání getCurrentTime a formátování času se opakuje ve funkcích saveHaiku a exportHaiku. Mohlo by být efektivnější získat čas jednou na začátku operace (např. v mainLoop v rámci dané volby menu) a předat ho jako argument.
Chybějící kombinace v getWordLists:
Použití _ _ jako záchytného vzoru v getWordLists je funkční, ale může skrýt fakt, že pro některé nové kombinace Mood a Theme neexistují specifické seznamy slov. Zvaž explicitní pokrytí všech kombinací nebo použití Map (Mood, Theme) ([String], [String], [String]) pro lepší škálovatelnost a přehlednost.
Závislosti: Ujisti se, že všechny nové závislosti (time, directory, containers) jsou přidány do souboru .cabal nebo package.yaml tvého projektu.
Závěr:
Pull request přináší mnoho hodnotných vylepšení. Hlavními oblastmi pro dopracování jsou funkční implementace historie a oprava logiky validace haiku (nebo její přehodnocení). Zlepšení zpracování chyb a správy stavu by dále zvýšilo robustnost a kvalitu kódu. Skvělá práce na rozšíření funkcionality!
