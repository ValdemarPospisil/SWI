import System.Random (randomRIO)
import Control.Monad (replicateM)
import Data.List (intercalate)

-- Datové typy pro nálady a témata
data Mood = Happy | Sad | Reflective deriving (Show, Enum, Bounded)
data Theme = Rain | Forest | Night | City deriving (Show, Enum, Bounded)

-- Pomocná funkce pro výběr náhodného prvku
randomFrom :: [a] -> IO a
randomFrom xs = do
  idx <- randomRIO (0, length xs - 1)
  return (xs !! idx)

-- Výběr z předem definovaných možností
promptChoice :: (Show a, Enum a, Bounded a) => String -> IO a
promptChoice label = do
  putStrLn $ "\n" ++ label
  let options = [minBound .. maxBound]
  mapM_ (\(i, opt) -> putStrLn $ show i ++ ". " ++ show opt) (zip [1..] options)
  putStr "Zadej číslo: "
  idx <- readLn
  return (options !! (idx - 1))

-- Slovníky podle nálady a tématu
getWordLists :: Mood -> Theme -> ([String], [String], [String])
getWordLists Happy Forest =
  ( ["Morning sun breaks through", "Laughing leaves dancing"]
  , ["Squirrels leap on mossy trunks", "Birdsongs echo far and wide"]
  , ["Joy hides in green shade", "Peace returns with wind"]
  )
getWordLists Sad Night =
  ( ["Empty streets at dusk", "Cold wind sighs alone"]
  , ["Darkness swallows silent stars", "Footsteps fade into the void"]
  , ["Nothing left to say", "Tears fall with the moon"]
  )
getWordLists Reflective Rain =
  ( ["Drops paint the window", "Stillness in my breath"]
  , ["Thoughts like rivers slowly pass", "Puddles mirror what I am"]
  , ["Grey clouds drift within", "Past lives drip away"]
  )
getWordLists _ _ =
  ( ["Leaves fall quietly", "Silent moonlight shines"]
  , ["Dreams awaken under trees", "Lanterns glow in distant mist"]
  , ["Peace comes after rain", "Stars begin to blink"]
  )

-- Generování haiku z dat
generateHaiku :: Mood -> Theme -> IO String
generateHaiku mood theme = do
  let (l1s, l2s, l3s) = getWordLists mood theme
  l1 <- randomFrom l1s
  l2 <- randomFrom l2s
  l3 <- randomFrom l3s
  return $ intercalate "\n" [l1, l2, l3]

-- Hlavní funkce
main :: IO ()
main = do
  putStrLn "Vítej v generátoru Haiku!"
  mood <- promptChoice "Vyber náladu:"
  theme <- promptChoice "Vyber téma:"
  putStrLn "\nVygenerované Haiku:"
  putStrLn "--------------------"
  poem <- generateHaiku mood theme
  putStrLn poem








Summary
Tento kód implementuje generátor Haiku, který uživatelům umožňuje vybrat si náladu a téma, na základě kterých se generuje náhodné haiku. Kód je dobře strukturovaný a využívá Haskellové funkce pro práci s náhodnými čísly a seznamy.

Bug

V kódu není zajištěna validace vstupu uživatele při výběru čísla. Pokud uživatel zadá číslo mimo rozsah dostupných možností, dojde k chybě. Doporučuji přidat kontrolu, která zajistí, že zadané číslo je v platném rozsahu.

Code Style

Kód je psán v souladu s konvencemi Haskellu. Používá se jasné a srozumitelné pojmenování funkcí a proměnných. Komentáře jsou přítomny a poskytují užitečné informace o jednotlivých částech kódu.

Code Structure

Struktura kódu je logická a přehledná. Funkce jsou rozděleny podle jejich účelu, což usnadňuje čtení a údržbu. Hlavní funkce main jasně ukazuje tok programu.

Readability

Kód je snadno čitelný díky dobrému formátování a jasným názvům. Použití komentářů zvyšuje srozumitelnost, což je důležité pro budoucí údržbu a rozšiřování.

Performance

Výkon kódu je adekvátní pro daný úkol. Použití randomRIO pro generování náhodných čísel je efektivní, avšak je dobré mít na paměti, že opakované volání této funkce může mít vliv na výkon, pokud by se generovalo velké množství haiku.

Scalability

Kód je relativně škálovatelný. Přidání nových nálad nebo témat by mělo být jednoduché, stačí rozšířit datové typy a funkci getWordLists. Nicméně, pokud by se počet možností výrazně zvýšil, může být potřeba optimalizovat způsob, jakým se náhodné prvky vybírají.

Security

Z hlediska bezpečnosti je důležité zajistit, aby uživatelský vstup byl správně validován. Jak již bylo zmíněno, chybějící kontrola vstupu může vést k runtime chybám. Doporučuji implementovat robustní zpracování chyb.

Error Handling

Kód v současné podobě nemá žádné mechanismy pro zpracování chyb. Je důležité přidat ošetření chyb, zejména při čtení uživatelského vstupu, aby se předešlo pádům programu.

Conclusion

Celkově je kód pro generátor Haiku dobře napsaný a strukturovaný. Obsahuje jasné funkce a logiku, ale vyžaduje vylepšení v oblasti zpracování chyb a validace uživatelského vstupu. S těmito úpravami by se mohl stát robustnějším a uživatelsky přívětivějším nástrojem.
