Promt:


Dej mi code review pro tento pull request:

diff --git a/src/Main.hs b/src/Main.hs
index 310e9ee..081deba 100644
--- a/src/Main.hs
+++ b/src/Main.hs
@@ -1,10 +1,31 @@
 import System.Random (randomRIO)
-import Control.Monad (replicateM)
-import Data.List (intercalate)
+import Control.Monad (replicateM, when)
+import Data.List (intercalate, sort)
+import System.IO (hFlush, stdout)
+import Data.Time.Clock (getCurrentTime)
+import Data.Time.Format (formatTime, defaultTimeLocale)
+import System.Directory (createDirectoryIfMissing)
+import qualified Data.Map as Map
 
 -- Datové typy pro nálady a témata
-data Mood = Happy | Sad | Reflective deriving (Show, Enum, Bounded)
-data Theme = Rain | Forest | Night | City deriving (Show, Enum, Bounded)
+data Mood = Happy | Sad | Reflective | Anxious | Nostalgic 
+  deriving (Show, Enum, Bounded, Eq, Ord)
+
+data Theme = Rain | Forest | Night | City | Ocean | Mountain | Desert 
+  deriving (Show, Enum, Bounded, Eq, Ord)
+
+-- Datová struktura pro ukládání historie
+data HaikuHistory = HaikuHistory {
+  poemText :: String,
+  poemMood :: Mood,
+  poemTheme :: Theme,
+  timestamp :: String
+} deriving (Show)
+
+-- Globální historie básní
+type HaikuHistoryMap = Map.Map Int HaikuHistory
+haikuHistory :: HaikuHistoryMap
+haikuHistory = Map.empty
 
 -- Pomocná funkce pro výběr náhodného prvku
 randomFrom :: [a] -> IO a
@@ -12,15 +33,59 @@ randomFrom xs = do
   idx <- randomRIO (0, length xs - 1)
   return (xs !! idx)
 
--- Výběr z předem definovaných možností
-promptChoice :: (Show a, Enum a, Bounded a) => String -> IO a
+-- Vylepšená funkce pro výběr z možností s potvrzením
+promptChoice :: (Show a, Enum a, Bounded a, Ord a) => String -> IO a
 promptChoice label = do
   putStrLn $ "\n" ++ label
-  let options = [minBound .. maxBound]
+  let options = sort [minBound .. maxBound]
   mapM_ (\(i, opt) -> putStrLn $ show i ++ ". " ++ show opt) (zip [1..] options)
-  putStr "Zadej číslo: "
+  putStr "Zadej číslo (nebo 0 pro náhodný výběr): "
+  hFlush stdout  -- Zajistí, že se prompt okamžitě zobrazí
   idx <- readLn
-  return (options !! (idx - 1))
+  if idx == 0
+    then randomFrom options
+    else if idx >= 1 && idx <= length options
+         then return (options !! (idx - 1))
+         else do
+           putStrLn "Neplatná volba, zkus to znovu."
+           promptChoice label
+
+-- Funkce pro ověření, zda haiku splňuje požadovaný počet slabik (5-7-5)
+validateHaiku :: String -> Bool
+validateHaiku poem = 
+  let lines = words <$> lines poem
+      counts = map length lines
+  in  length counts == 3 && counts == [5, 7, 5]
+
+-- Funkce pro uložení vygenerovaného haiku do historie
+saveHaiku :: String -> Mood -> Theme -> IO Int
+saveHaiku poem mood theme = do
+  currentTime <- getCurrentTime
+  let timeStr = formatTime defaultTimeLocale "%Y-%m-%d %H:%M:%S" currentTime
+      newHistory = HaikuHistory poem mood theme timeStr
+      newId = Map.size haikuHistory + 1
+  return newId
+
+-- Funkce pro export haiku do souboru
+exportHaiku :: String -> Mood -> Theme -> IO ()
+exportHaiku poem mood theme = do
+  currentTime <- getCurrentTime
+  let timeStr = formatTime defaultTimeLocale "%Y%m%d%H%M%S" currentTime
+      fileName = "haiku_" ++ show mood ++ "_" ++ show theme ++ "_" ++ timeStr ++ ".txt"
+      folderPath = "output"
+  
+  -- Vytvoření složky, pokud neexistuje
+  createDirectoryIfMissing True folderPath
+  
+  -- Uložení básně do souboru
+  writeFile (folderPath ++ "/" ++ fileName) $ 
+    "Haiku\n" ++
+    "Mood: " ++ show mood ++ "\n" ++
+    "Theme: " ++ show theme ++ "\n" ++
+    "Date: " ++ formatTime defaultTimeLocale "%Y-%m-%d %H:%M:%S" currentTime ++ "\n\n" ++
+    poem
+  
+  putStrLn $ "Haiku uloženo do souboru: " ++ fileName
 
 -- Slovníky podle nálady a tématu
 getWordLists :: Mood -> Theme -> ([String], [String], [String])
@@ -39,6 +104,18 @@ getWordLists Reflective Rain =
   , ["Thoughts like rivers slowly pass", "Puddles mirror what I am"]
   , ["Grey clouds drift within", "Past lives drip away"]
   )
+-- Přidaná nová kombinace pro Anxious City
+getWordLists Anxious City =
+  ( ["Traffic roars like waves", "Ticking clocks too loud"]
+  , ["Crowds swarm through concrete canyons", "Eyes avoid meeting strangers' gaze"]
+  , ["Heart beats much too fast", "No peace in this place"]
+  )
+-- Přidaná nová kombinace pro Nostalgic Ocean
+getWordLists Nostalgic Ocean =
+  ( ["Childhood shores return", "Salt spray on my lips"]
+  , ["Memories float on gentle tides", "Seashells whisper stories old"]
+  , ["Time washed out to sea", "Waves bring past to shore"]
+  )
 getWordLists _ _ =
   ( ["Leaves fall quietly", "Silent moonlight shines"]
   , ["Dreams awaken under trees", "Lanterns glow in distant mist"]
@@ -54,13 +131,79 @@ generateHaiku mood theme = do
   l3 <- randomFrom l3s
   return $ intercalate "\n" [l1, l2, l3]
 
--- Hlavní funkce
+-- Generování sekvence haiku
+generateHaikuSequence :: Int -> Mood -> Theme -> IO [String]
+generateHaikuSequence count mood theme
+  | count <= 0 = return []
+  | otherwise = do
+      sequence <- replicateM count (generateHaiku mood theme)
+      return sequence
+
+-- Zobrazení menu
+showMenu :: IO ()
+showMenu = do
+  putStrLn "\nVyber akci:"
+  putStrLn "1. Vygenerovat jedno haiku"
+  putStrLn "2. Vygenerovat sekvenci haiku"
+  putStrLn "3. Exportovat haiku do souboru"
+  putStrLn "4. Konec"
+  putStr "Tvá volba: "
+  hFlush stdout
+
+-- Hlavní funkce programu
 main :: IO ()
 main = do
-  putStrLn "Vítej v generátoru Haiku!"
-  mood <- promptChoice "Vyber náladu:"
-  theme <- promptChoice "Vyber téma:"
-  putStrLn "\nVygenerované Haiku:"
-  putStrLn "--------------------"
-  poem <- generateHaiku mood theme
-  putStrLn poem
+  putStrLn "Vítej v generátoru Haiku 2.0!"
+  mainLoop
+
+mainLoop :: IO ()
+mainLoop = do
+  showMenu
+  choice <- readLn
+  case choice of
+    1 -> do
+      mood <- promptChoice "Vyber náladu:"
+      theme <- promptChoice "Vyber téma:"
+      putStrLn "\nVygenerované Haiku:"
+      putStrLn "--------------------"
+      poem <- generateHaiku mood theme
+      putStrLn poem
+      
+      when (not $ validateHaiku poem) $
+        putStrLn "Upozornění: Toto haiku nemusí dodržovat tradiční formát 5-7-5 slabik."
+      
+      -- Uložení do historie
+      _ <- saveHaiku poem mood theme
+      mainLoop
+    
+    2 -> do
+      mood <- promptChoice "Vyber náladu:"
+      theme <- promptChoice "Vyber téma:" 
+      putStr "Kolik haiku chceš vygenerovat? "
+      hFlush stdout
+      count <- readLn
+      putStrLn "\nVygenerovaná sekvence Haiku:"
+      putStrLn "-------------------------"
+      sequence <- generateHaikuSequence count mood theme
+      mapM_ (\(i, p) -> do
+          putStrLn $ "Haiku #" ++ show i ++ ":"
+          putStrLn p
+          putStrLn ""
+        ) $ zip [1..] sequence
+      mainLoop
+    
+    3 -> do
+      mood <- promptChoice "Vyber náladu:"
+      theme <- promptChoice "Vyber téma:"
+      putStrLn "\nVygenerované Haiku k exportu:"
+      putStrLn "----------------------------"
+      poem <- generateHaiku mood theme
+      putStrLn poem
+      exportHaiku poem mood theme
+      mainLoop
+    
+    4 -> putStrLn "Děkuji za použití generátoru Haiku. Nashledanou!"
+    
+    _ -> do
+      putStrLn "Neplatná volba, zkus to znovu."
+      mainLoop




# Code Review for Haiku Generator Pull Request

## Overall Impressions
This is a significant improvement to the Haiku generator, adding many useful features like history tracking, export functionality, and a menu system. The code is generally well-structured and follows Haskell best practices.

## Positive Aspects

1. **Enhanced Data Types**:
   - Added new `Mood` and `Theme` variants (Anxious, Nostalgic, Ocean, Mountain, Desert)
   - Made them `Ord` instances for sorting
   - Added proper data structure for history tracking

2. **Improved User Interaction**:
   - Added menu system with multiple options
   - Better prompt handling with `hFlush stdout`
   - Random selection option (0) in `promptChoice`

3. **New Features**:
   - Haiku validation (5-7-5 syllable check)
   - Export to files with timestamp
   - Sequence generation
   - History tracking (though see note below)

4. **Code Organization**:
   - Good separation of concerns
   - Clear function responsibilities

## Suggestions for Improvement

1. **History Implementation**:
   - Currently using a global `haikuHistory` Map that never gets updated (always empty)
   - Consider using `State` monad or passing the history as a parameter
   - The `saveHaiku` function returns an ID but doesn't actually save anything

2. **Error Handling**:
   - Could add more robust error handling for file operations
   - Consider using `Maybe` or `Either` for operations that might fail

3. **Validation**:
   - The syllable counting in `validateHaiku` is simplistic (just counts words)
   - Consider a more accurate syllable counting method

4. **Code Duplication**:
   - The haiku generation and display code is duplicated in menu options 1 and 3
   - Could be refactored into a helper function

5. **Internationalization**:
   - All strings are in Czech - consider making this configurable

6. **Testing**:
   - Would benefit from unit tests, especially for the validation and generation logic

7. **Type Safety**:
   - The menu uses raw `Int` values - could use a proper ADT for menu options

## Specific Code Comments

1. In `promptChoice`, the error handling could be more type-safe:
   ```haskell
   idx <- readLn
   ```
   This will throw an exception if the input isn't an integer.

2. The `validateHaiku` function could be enhanced:
   ```haskell
   validateHaiku :: String -> Bool
   validateHaiku poem = 
     let lines = words <$> lines poem
         counts = map length lines
     in  length counts == 3 && counts == [5, 7, 5]
   ```
   This just counts words, not syllables. Consider a more sophisticated approach.

3. The export filename generation could be sanitized:
   ```haskell
   let fileName = "haiku_" ++ show mood ++ "_" ++ show theme ++ "_" ++ timeStr ++ ".txt"
   ```
   Special characters in mood/theme could cause filesystem issues.

## Conclusion

This is a well-thought-out expansion of the Haiku generator. The main issues to address are:
1. Fixing the history functionality
2. Improving the syllable counting validation
3. Reducing code duplication in the menu handling
4. Adding better error handling

The changes show good attention to user experience and code structure. With these improvements addressed, it will be an excellent addition to the codebase.
