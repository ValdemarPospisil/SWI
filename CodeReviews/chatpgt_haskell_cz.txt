Promt:

Dej mi code review pro tento pull request:

diff --git a/src/Main.hs b/src/Main.hs
index 310e9ee..081deba 100644
\--- a/src/Main.hs
+++ b/src/Main.hs
@@ -1,10 +1,31 @@
import System.Random (randomRIO)
-import Control.Monad (replicateM)
-import Data.List (intercalate)
+import Control.Monad (replicateM, when)
+import Data.List (intercalate, sort)
+import System.IO (hFlush, stdout)
+import Data.Time.Clock (getCurrentTime)
+import Data.Time.Format (formatTime, defaultTimeLocale)
+import System.Directory (createDirectoryIfMissing)
+import qualified Data.Map as Map

\-- Datové typy pro nálady a témata
-data Mood = Happy | Sad | Reflective deriving (Show, Enum, Bounded)
-data Theme = Rain | Forest | Night | City deriving (Show, Enum, Bounded)
+data Mood = Happy | Sad | Reflective | Anxious | Nostalgic

* deriving (Show, Enum, Bounded, Eq, Ord)
*

+data Theme = Rain | Forest | Night | City | Ocean | Mountain | Desert

* deriving (Show, Enum, Bounded, Eq, Ord)
*

+-- Datová struktura pro ukládání historie
+data HaikuHistory = HaikuHistory {

* poemText :: String,
* poemMood :: Mood,
* poemTheme :: Theme,
* timestamp :: String
  +} deriving (Show)
*

+-- Globální historie básní
+type HaikuHistoryMap = Map.Map Int HaikuHistory
+haikuHistory :: HaikuHistoryMap
+haikuHistory = Map.empty

\-- Pomocná funkce pro výběr náhodného prvku
randomFrom :: \[a] -> IO a
@@ -12,15 +33,59 @@ randomFrom xs = do
idx <- randomRIO (0, length xs - 1)
return (xs !! idx)

\--- Výběr z předem definovaných možností
-promptChoice :: (Show a, Enum a, Bounded a) => String -> IO a
+-- Vylepšená funkce pro výběr z možností s potvrzením
+promptChoice :: (Show a, Enum a, Bounded a, Ord a) => String -> IO a
promptChoice label = do
putStrLn \$ "\n" ++ label

* let options = \[minBound .. maxBound]

- let options = sort \[minBound .. maxBound]
  mapM\_ ((i, opt) -> putStrLn \$ show i ++ ". " ++ show opt) (zip \[1..] options)

* putStr "Zadej číslo: "

- putStr "Zadej číslo (nebo 0 pro náhodný výběr): "
- hFlush stdout  -- Zajistí, že se prompt okamžitě zobrazí
  idx <- readLn

* return (options !! (idx - 1))

- if idx == 0
- then randomFrom options
- else if idx >= 1 && idx <= length options
- ```
      then return (options !! (idx - 1))
  ```
- ```
      else do
  ```
- ```
        putStrLn "Neplatná volba, zkus to znovu."
  ```
- ```
        promptChoice label
  ```
-

+-- Funkce pro ověření, zda haiku splňuje požadovaný počet slabik (5-7-5)
+validateHaiku :: String -> Bool
+validateHaiku poem =

* let lines = words <\$> lines poem
* ```
   counts = map length lines
  ```
* in  length counts == 3 && counts == \[5, 7, 5]
*

+-- Funkce pro uložení vygenerovaného haiku do historie
+saveHaiku :: String -> Mood -> Theme -> IO Int
+saveHaiku poem mood theme = do

* currentTime <- getCurrentTime
* let timeStr = formatTime defaultTimeLocale "%Y-%m-%d %H:%M:%S" currentTime
* ```
   newHistory = HaikuHistory poem mood theme timeStr
  ```
* ```
   newId = Map.size haikuHistory + 1
  ```
* return newId
*

+-- Funkce pro export haiku do souboru
+exportHaiku :: String -> Mood -> Theme -> IO ()
+exportHaiku poem mood theme = do

* currentTime <- getCurrentTime
* let timeStr = formatTime defaultTimeLocale "%Y%m%d%H%M%S" currentTime
* ```
   fileName = "haiku_" ++ show mood ++ "_" ++ show theme ++ "_" ++ timeStr ++ ".txt"
  ```
* ```
   folderPath = "output"
  ```
*
* \-- Vytvoření složky, pokud neexistuje
* createDirectoryIfMissing True folderPath
*
* \-- Uložení básně do souboru
* writeFile (folderPath ++ "/" ++ fileName) \$
* "Haiku\n" ++
* "Mood: " ++ show mood ++ "\n" ++
* "Theme: " ++ show theme ++ "\n" ++
* "Date: " ++ formatTime defaultTimeLocale "%Y-%m-%d %H:%M:%S" currentTime ++ "\n\n" ++
* poem
*
* putStrLn \$ "Haiku uloženo do souboru: " ++ fileName

\-- Slovníky podle nálady a tématu
getWordLists :: Mood -> Theme -> (\[String], \[String], \[String])
@@ -39,6 +104,18 @@ getWordLists Reflective Rain =
, \["Thoughts like rivers slowly pass", "Puddles mirror what I am"]
, \["Grey clouds drift within", "Past lives drip away"]
)
+-- Přidaná nová kombinace pro Anxious City
+getWordLists Anxious City =

* ( \["Traffic roars like waves", "Ticking clocks too loud"]
* , \["Crowds swarm through concrete canyons", "Eyes avoid meeting strangers' gaze"]
* , \["Heart beats much too fast", "No peace in this place"]
* )
  +-- Přidaná nová kombinace pro Nostalgic Ocean
  +getWordLists Nostalgic Ocean =
* ( \["Childhood shores return", "Salt spray on my lips"]
* , \["Memories float on gentle tides", "Seashells whisper stories old"]
* , \["Time washed out to sea", "Waves bring past to shore"]
* )
  getWordLists \_ \_ =
  ( \["Leaves fall quietly", "Silent moonlight shines"]
  , \["Dreams awaken under trees", "Lanterns glow in distant mist"]
  @@ -54,13 +131,79 @@ generateHaiku mood theme = do
  l3 <- randomFrom l3s
  return \$ intercalate "\n" \[l1, l2, l3]

\--- Hlavní funkce
+-- Generování sekvence haiku
+generateHaikuSequence :: Int -> Mood -> Theme -> IO \[String]
+generateHaikuSequence count mood theme

* \| count <= 0 = return \[]
* \| otherwise = do
* ```
   sequence <- replicateM count (generateHaiku mood theme)
  ```
* ```
   return sequence
  ```
*

+-- Zobrazení menu
+showMenu :: IO ()
+showMenu = do

* putStrLn "\nVyber akci:"
* putStrLn "1. Vygenerovat jedno haiku"
* putStrLn "2. Vygenerovat sekvenci haiku"
* putStrLn "3. Exportovat haiku do souboru"
* putStrLn "4. Konec"
* putStr "Tvá volba: "
* hFlush stdout
*

+-- Hlavní funkce programu
main :: IO ()
main = do

* putStrLn "Vítej v generátoru Haiku!"
* mood <- promptChoice "Vyber náladu:"
* theme <- promptChoice "Vyber téma:"
* putStrLn "\nVygenerované Haiku:"
* putStrLn "--------------------"
* poem <- generateHaiku mood theme
* putStrLn poem

- putStrLn "Vítej v generátoru Haiku 2.0!"
- mainLoop
-

+mainLoop :: IO ()
+mainLoop = do

* showMenu
* choice <- readLn
* case choice of
* 1 -> do
* ```
   mood <- promptChoice "Vyber náladu:"
  ```
* ```
   theme <- promptChoice "Vyber téma:"
  ```
* ```
   putStrLn "\nVygenerované Haiku:"
  ```
* ```
   putStrLn "--------------------"
  ```
* ```
   poem <- generateHaiku mood theme
  ```
* ```
   putStrLn poem
  ```
*
* ```
   when (not $ validateHaiku poem) $
  ```
* ```
     putStrLn "Upozornění: Toto haiku nemusí dodržovat tradiční formát 5-7-5 slabik."
  ```
*
* ```
   -- Uložení do historie
  ```
* ```
   _ <- saveHaiku poem mood theme
  ```
* ```
   mainLoop
  ```
*
* 2 -> do
* ```
   mood <- promptChoice "Vyber náladu:"
  ```
* ```
   theme <- promptChoice "Vyber téma:" 
  ```
* ```
   putStr "Kolik haiku chceš vygenerovat? "
  ```
* ```
   hFlush stdout
  ```
* ```
   count <- readLn
  ```
* ```
   putStrLn "\nVygenerovaná sekvence Haiku:"
  ```
* ```
   putStrLn "-------------------------"
  ```
* ```
   sequence <- generateHaikuSequence count mood theme
  ```
* ```
   mapM_ (\(i, p) -> do
  ```
* ```
       putStrLn $ "Haiku #" ++ show i ++ ":"
  ```
* ```
       putStrLn p
  ```
* ```
       putStrLn ""
  ```
* ```
     ) $ zip [1..] sequence
  ```
* ```
   mainLoop
  ```
*
* 3 -> do
* ```
   mood <- promptChoice "Vyber náladu:"
  ```
* ```
   theme <- promptChoice "Vyber téma:"
  ```
* ```
   putStrLn "\nVygenerované Haiku k exportu:"
  ```
* ```
   putStrLn "----------------------------"
  ```
* ```
   poem <- generateHaiku mood theme
  ```
* ```
   putStrLn poem
  ```
* ```
   exportHaiku poem mood theme
  ```
* ```
   mainLoop
  ```
*
* 4 -> putStrLn "Děkuji za použití generátoru Haiku. Nashledanou!"
*
* \_ -> do
* ```
   putStrLn "Neplatná volba, zkus to znovu."
  ```
* ```
   mainLoop
  ```





Díky za sdílení pull requestu. Níže najdeš detailní code review rozdělené do několika sekcí:

---

## ✅ **Pozitiva**

1. **Zvětšený rozsah funkcionality:**

   * Přidání nových nálad (`Anxious`, `Nostalgic`) a témat (`Ocean`, `Mountain`, `Desert`) zvyšuje variabilitu výstupů.
   * Zavedení hlavního menu a hlavního loopu (`mainLoop`) činí program interaktivnějším a opakovaně použitelným.

2. **Uživatelská přívětivost:**

   * Možnost náhodného výběru (volba `0`) je intuitivní a praktická.
   * `promptChoice` je teď robustnější díky kontrole vstupu a opětovnému dotazu na chybnou volbu.

3. **Modularita a čistota:**

   * Většina logiky byla rozdělena do samostatných funkcí (`generateHaikuSequence`, `validateHaiku`, `exportHaiku`), což zvyšuje čitelnost a opětovnou použitelnost.

4. **Příprava na persistenci:**

   * Zavedení `HaikuHistory` a `saveHaiku` ukazuje směr k možnému logování nebo historii, i když aktuálně jen simuluje uložení.

---

## 🛠️ **Návrhy na zlepšení**

### 1. **`validateHaiku` není správně:**

```haskell
validateHaiku poem = 
  let lines = words <$> lines poem
      counts = map length lines
```

* Tady dojde k *shadowingu* proměnné `lines`.
* Navíc `words <$> lines` aplikuje `words` na každou řádku, čímž spočítáš počet slov, ne slabik.
* Pokud máš za cíl validovat strukturu podle počtu řádků, udělej např.:

  ```haskell
  validateHaiku poem = 
    let lineCount = length (lines poem)
    in lineCount == 3
  ```
* Pokud chceš validovat slabiky, budeš muset implementovat heuristické počítání slabik v angličtině, což není úplně triviální.

### 2. **`saveHaiku` neukládá nic do `haikuHistory`:**

```haskell
-- haikuHistory = Map.empty
```

* Tato proměnná je *immutable* a není možné ji modifikovat bez použití IORef, MVar apod.
* Navrhuj buď:

  * Předat a vracet `HaikuHistoryMap` jako parametr,
  * nebo ukládat haiku rovnou do souboru nebo do SQLite/json, pokud chceš perzistenci.

### 3. **Magic constants a překlad UI:**

* Menu a UI jsou napůl česky, napůl anglicky („Haiku“, `Mood`, `Theme` atd.). Buď vše přelož, nebo konzistentně ponech anglicky.
* Magic stringy jako `"output"` by mohly být proměnnými.

### 4. **Duplicitní výpočet času v `exportHaiku`:**

```haskell
currentTime <- getCurrentTime
...
"Date: " ++ formatTime defaultTimeLocale "%Y-%m-%d %H:%M:%S" currentTime
```

* Duplicitní formatování by mohlo být refaktorováno do jedné proměnné.

---

## 💡 **Možnosti vylepšení do budoucna**

* ✅ Přidat reálné počítání slabik (např. pomocí nějakého heuristického algoritmu).
* ✅ Přidat možnost výpisu předchozích haiku (z historie).
* 💾 Ukládání historie do JSON nebo SQLite.
* 🌐 Přidání webového UI např. pomocí Scotty nebo Servant.

---

## 🔚 Závěr

Tento pull request je velmi kvalitní krok směrem ke komplexnějšímu generátoru haiku. Dobře oddělená logika, rozšířená funkcionalita a interaktivní menu ukazují na promyšlený návrh. Většina problémů je spíše technického charakteru a může být snadno opravena.

Chceš, abych ti navrhl refaktor pro `validateHaiku` nebo perzistentní ukládání historie?
